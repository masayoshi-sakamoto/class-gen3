<template>
  <LayoutApp>
    <v-container fluid>
      <div class="text-right mb-3">
        <v-btn color="primary" class="font-weight-bold" depressed @click="open(null)">新規作成</v-btn>
      </div>
      <DataTable v-model="items" :loading="App.<%= name.toLowerCase() %>.loading" :headers="headers" :options.sync="App.<%= name.toLowerCase() %>.options"
        :query="App.<%= name.toLowerCase() %>.query" @fetch="fetch" @click="open"></DataTable>
      <Dialog v-model="App.<%= name.toLowerCase() %>.dialog" title="新規登録">
        <Form<%= name %> v-model="value" @save="save" @destroy="destroy"></Form<%= name %>>
      </Dialog>
    </v-container>
  </LayoutApp>
</template>

<script lang="ts">
  import Vue from 'vue'
  import authenticated from '@/middleware/authenticated'
  import LayoutApp from '@/components/organisms/Layout/App'
  import DataTable from '@/components/organisms/DataTable'
  import Dialog from '@/components/molecules/Dialog'
  import Form<%= name %> from '@/components/organisms/Form/<%= name %>'
  import <%= name %>Entity, { headers } from '@/entities/<%= name %>'
  import Fetch<%= names %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Fetch<%= names %>UseCase'
  import Save<%= name %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Save<%= name %>UseCase'
  import Delete<%= name %>UseCase from '@/usecases/<%= name.toLowerCase() %>/Delete<%= name %>UseCase'

  interface IData {
    value: <%= name %>Entity | null
    items: <%= name %>Entity[]
    headers: any[]
    options: Object
  }

  export default Vue.extend({
    components: {
      LayoutApp,
      DataTable,
      Dialog,
      Form<%= name %>
    },
    middleware: authenticated,
    data(): IData {
      return {
        value: null,
        items: [],
        headers,
        options: {}
      }
    },
    async fetch() {
      await this.fetch()
    },
    methods: {
      open(value: <%= name %>Entity | null) {
        this.value = value
        this.App.<%= name.toLowerCase() %>.dialog = true
      },
      async fetch() {
        try {
          this.App.<%= name.toLowerCase() %>.loading = true
          await new Fetch<%= names %>UseCase(this.App).execute()
          this.items = this.App.<%= name.toLowerCase() %>.all()
        } catch (exception: any) {
          this.$nuxt.error(exception)
        } finally {
          this.App.<%= name.toLowerCase() %>.loading = false
        }
      },
      async save() {
        if (this.value) {
          try {
            this.App.state.loading = true
            await new Save<%= name %>UseCase(this.App).execute(this.value)
            this.App.<%= name.toLowerCase() %>.dialog = false
            await this.fetch()
          } catch (exception: any) {
            this.$nuxt.error(exception)
          } finally {
            this.App.state.loading = false
          }
        }
      },
      async destroy() {
        if (this.value) {
          try {
            this.App.state.loading = true
            await new Delete<%= name %>UseCase(this.App).execute(this.value)
            this.App.<%= name.toLowerCase() %>.dialog = false
            await this.fetch()
          } catch (exception: any) {
            this.$nuxt.error(exception)
          } finally {
            this.App.state.loading = false
          }
        }
      }
    }
  })
</script>