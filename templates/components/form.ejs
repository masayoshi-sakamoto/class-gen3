<template>
  <validation-observer ref="observer" v-slot="{ invalid, passes }">
    <v-form ref="form" @submit.prevent="passes(submit)">
      <div v-if="props.id" class="text-right mb-4">
        <v-btn min-width="240" class="font-weight-bold" color="error" depressed @click="dialog = true">
          削除する
        </v-btn>
      </div>
      <v-alert v-if="App.state.errors.message" dense outlined type="error" class="mt-6 mb-10">
        {{ App.state.errors.message }}
      </v-alert>
      <validation-provider v-slot="{ errors }" rules="required" name="タイトル">
        <v-text-field v-model="props.<%= title %>" label="タイトル" :error-messages="App.state.errors.<%= title %> ? App.state.errors.<%= title %> : errors[0]"></v-text-field>
      </validation-provider>
      <div class="text-center mt-4">
        <v-btn min-width="240" type="submit" class="font-weight-bold" color="primary" depressed :disabled="invalid">
          保存
        </v-btn>
      </div>
    </v-form>
    <Destroy v-model="dialog" @execute="destroy"></Destroy>
  </validation-observer>
</template>

<script lang="ts">
  import Vue, { PropType } from 'vue'
  import <%= name %>Entity, { Empty<%= name %>PropsFactory, I<%= name %>Props } from '@/entities/<%= name %>'
  import Destroy from '@/components/molecules/Destroy'

  interface IData {
    props: I<%= name %>Props
    dialog: boolean
  }

  export default Vue.extend({
    components: {
      Destroy
    },
    props: {
      value: {
        type: Object as PropType<<%= name %>Entity>,
        default: null
      }
    },
    data(): IData {
      return {
        props: Empty<%= name %>PropsFactory(),
        dialog: false
      }
    },
    watch: {
      value: {
        handler() {
          this.cancel()
          this.props = this.value ? this.value.clone.props : Empty<%= name %>PropsFactory()
        },
        immediate: true
      }
    },
    methods: {
      submit() {
        this.$emit('input', new <%= name %>Entity(this.props))
        this.$emit('save')
      },
      destroy() {
        this.$emit('input', new <%= name %>Entity(this.props))
        this.$emit('destroy')
      },
      cancel() {
        const observer: any = this.$refs.observer
        if (observer) {
          observer.reset()
        }
        this.App.state.errors = {}
      }
    }
  })
</script>